name: Release Dev
run-name: Publish developer build initiated by ${{ github.actor }} from ${{ github.ref }}

on:
  push:
    branches: 
      - develop
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test_release_dev:
    name: Run Unit Tests before Release Dev Version
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Restore
        run: dotnet restore lib/AutoBackend.Sdk

      - name: Build
        run: dotnet build lib/AutoBackend.Sdk --configuration Release --no-restore

      - name: Test
        run: dotnet test lib/AutoBackend.Sdk --no-restore --verbosity normal

  create_release_dev:
    name: Create Release Dev Version
    needs:
      - test_release_dev
    runs-on: ubuntu-latest
    outputs:
      created_release_version: ${{ steps.get_release_dev_version.outputs.result }}

    steps:
      - uses: actions/checkout@v3

      - name: Get Build Stamp
        run: |
          echo "BUILD_STAMP=$(date +'%Y%m%d%H%M%S')" >> ${GITHUB_ENV}

      - name: Get Release Dev Version
        id: get_release_dev_version
        uses: actions/github-script@v6
        with:
          script: |
            var major = ${{ vars.DEFAULT_MAJOR_VERSION }};
            var minor = ${{ vars.DEFAULT_MINOR_VERSION }};
            var patch = ${{ vars.DEFAULT_PATCH_VERSION }};
            var latestRelease = { data: { name: `${major}.${minor}.${patch}` } };
            try {
              latestRelease = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
            } catch {
              // do nothing
            }
            
            if (/\d+\.\d+\.\d+/.test(latestRelease?.data?.name)) {
              var latestVersion = latestRelease.data.name.match(/\d+\.\d+\.\d+/)[0];
              var parsed = latestVersion.split('.');
              if (parsed.length == 3) {
                var major_max = Math.max(major, +parsed[0]);
                var minor_max = Math.max(minor, +parsed[1]);
                var patch_max = Math.max(patch, +parsed[2]);
                return `${major_max}.${minor_max}.${patch_max+1}-dev-${process.env.BUILD_STAMP}`;
              }
              throw latestRelease;
            }
            throw latestRelease;
          result-encoding: string

  build_package_dev:
    name: Build Package Dev Version
    needs:
      - test_release_dev
      - create_release_dev
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set Build Dev Version "${{ needs.create_release_dev.outputs.created_release_version }}"
        run: |
          echo "BUILD_VERSION=${{ needs.create_release_dev.outputs.created_release_version }}" >> ${GITHUB_ENV}

      - name: Setup
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Restore
        run: dotnet restore lib/AutoBackend.Sdk

      - name: Build Version "${{ env.BUILD_VERSION }}"
        run: dotnet build lib/AutoBackend.Sdk --configuration Release --no-restore

      - name: Pack Dev Version "${{ env.BUILD_VERSION }}"
        run: dotnet pack lib/AutoBackend.Sdk --configuration Release --no-restore --output ${{ env.DOTNET_ROOT }}/Package

      - uses: actions/upload-artifact@master
        with:
          name: release_dev_package
          path: ${{ env.DOTNET_ROOT }}/Package

  publish_myget_dev:
    name: Publish MyGet Package Dev Version
    needs:
      - test_release_dev
      - create_release_dev
      - build_package_dev
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - uses: actions/download-artifact@master
        with:
          name: release_dev_package
          path: ${{ env.DOTNET_ROOT }}/Package

      - name: Publish MyGet Package Dev Version "${{ needs.create_release_dev.outputs.created_release_version }}"
        run: dotnet nuget push ${{ env.DOTNET_ROOT }}/Package/*.nupkg --source https://www.myget.org/F/autobackend-dev/auth/${{ secrets.MYGET_API_KEY }}/api/v3/index.json
